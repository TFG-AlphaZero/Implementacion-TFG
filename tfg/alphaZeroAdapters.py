import numpy as np

from tfg.games import BLACK, WHITE


class NeuralNetworkAdapter:
    """Abstract class with methods to convert an observation to network input
    (matching input_shape attribute) and its output (with output_features
    features) to an action.

    This class should not be used directly, but rather should be extended for
    every game.

    """

    def __init__(self, input_shape, output_features):
        """
        Args:
            input_shape ((int, int, int)): Shape of the in input
                representing a board state for the neural network.
            output_features (int): Number of features representing an action
                for the game.
        """
        self.input_shape = input_shape
        self.output_features = output_features

    def to_input(self, observation, to_play):
        """Converts an observation given by a tfg.games.GameEnv to a valid
        input for the neural network with shape input_shape.

        Args:
            observation (object): Observation generated by a tfg.games.GameEnv.
            to_play (int): The player (BLACK or WHITE) to play in the given
                state.

        Returns:
            numpy.ndarray: Valid input for the neural network.

        """
        raise NotImplementedError

    def to_indices(self, action):
        """Converts a valid action to indices to access a probability array
        with shape output_shape.

        Args:
            action (object): Action generated by the game.

        Returns:
            (int or (int, int, int)): A valid index or indices representing
                the given action in the policy head output.

        """
        raise NotImplementedError


class TicTacToeAdapter(NeuralNetworkAdapter):
    """Adapts input and actions for Tic Tac Toe."""

    def __init__(self):
        super(TicTacToeAdapter, self).__init__((3, 3, 3), 9)

    def to_input(self, observation, to_play):
        array = np.zeros(shape=self.input_shape)
        array[observation == WHITE, 0] = 1
        array[observation == BLACK, 1] = 1
        array[..., 2] = 0 if to_play == WHITE else 1
        return array

    def to_indices(self, action):
        return action


class ConnectNAdapter(NeuralNetworkAdapter):
    """Adapts input and actions for Connect N."""

    def __init__(self, env):
        """
        Args:
            env (game.connect_n.ConnectN): Connect N game being adapted.
        """
        rows, cols = env.observation_space.shape
        super(ConnectNAdapter, self).__init__((rows, cols, 3), cols)

    def to_input(self, observation, to_play):
        array = np.zeros(shape=self.input_shape)
        array[observation == WHITE, 0] = 1
        array[observation == BLACK, 1] = 1
        array[..., 2] = 0 if to_play == WHITE else 1
        return array

    def to_indices(self, action):
        return action
